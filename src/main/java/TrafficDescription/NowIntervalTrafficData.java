package TrafficDescription;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-09")
public class NowIntervalTrafficData implements org.apache.thrift.TBase<NowIntervalTrafficData, NowIntervalTrafficData._Fields>, java.io.Serializable, Cloneable, Comparable<NowIntervalTrafficData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TrafficDescription.NowIntervalTrafficData");

  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_OF_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("timeOfHour", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField NOW_INTERVAL_TRAFFIC_FIELD_DESC = new org.apache.thrift.protocol.TField("nowIntervalTraffic", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NowIntervalTrafficDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NowIntervalTrafficDataTupleSchemeFactory();

  public java.lang.String areaId; // required
  public double timeOfHour; // required
  public java.util.List<java.lang.Double> nowIntervalTraffic; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AREA_ID((short)1, "areaId"),
    TIME_OF_HOUR((short)2, "timeOfHour"),
    NOW_INTERVAL_TRAFFIC((short)3, "nowIntervalTraffic");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AREA_ID
          return AREA_ID;
        case 2: // TIME_OF_HOUR
          return TIME_OF_HOUR;
        case 3: // NOW_INTERVAL_TRAFFIC
          return NOW_INTERVAL_TRAFFIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEOFHOUR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_OF_HOUR, new org.apache.thrift.meta_data.FieldMetaData("timeOfHour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_INTERVAL_TRAFFIC, new org.apache.thrift.meta_data.FieldMetaData("nowIntervalTraffic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NowIntervalTrafficData.class, metaDataMap);
  }

  public NowIntervalTrafficData() {
  }

  public NowIntervalTrafficData(
    java.lang.String areaId,
    double timeOfHour,
    java.util.List<java.lang.Double> nowIntervalTraffic)
  {
    this();
    this.areaId = areaId;
    this.timeOfHour = timeOfHour;
    setTimeOfHourIsSet(true);
    this.nowIntervalTraffic = nowIntervalTraffic;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NowIntervalTrafficData(NowIntervalTrafficData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAreaId()) {
      this.areaId = other.areaId;
    }
    this.timeOfHour = other.timeOfHour;
    if (other.isSetNowIntervalTraffic()) {
      java.util.List<java.lang.Double> __this__nowIntervalTraffic = new java.util.ArrayList<java.lang.Double>(other.nowIntervalTraffic);
      this.nowIntervalTraffic = __this__nowIntervalTraffic;
    }
  }

  public NowIntervalTrafficData deepCopy() {
    return new NowIntervalTrafficData(this);
  }

  @Override
  public void clear() {
    this.areaId = null;
    setTimeOfHourIsSet(false);
    this.timeOfHour = 0.0;
    this.nowIntervalTraffic = null;
  }

  public java.lang.String getAreaId() {
    return this.areaId;
  }

  public NowIntervalTrafficData setAreaId(java.lang.String areaId) {
    this.areaId = areaId;
    return this;
  }

  public void unsetAreaId() {
    this.areaId = null;
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return this.areaId != null;
  }

  public void setAreaIdIsSet(boolean value) {
    if (!value) {
      this.areaId = null;
    }
  }

  public double getTimeOfHour() {
    return this.timeOfHour;
  }

  public NowIntervalTrafficData setTimeOfHour(double timeOfHour) {
    this.timeOfHour = timeOfHour;
    setTimeOfHourIsSet(true);
    return this;
  }

  public void unsetTimeOfHour() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOFHOUR_ISSET_ID);
  }

  /** Returns true if field timeOfHour is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeOfHour() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOFHOUR_ISSET_ID);
  }

  public void setTimeOfHourIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOFHOUR_ISSET_ID, value);
  }

  public int getNowIntervalTrafficSize() {
    return (this.nowIntervalTraffic == null) ? 0 : this.nowIntervalTraffic.size();
  }

  public java.util.Iterator<java.lang.Double> getNowIntervalTrafficIterator() {
    return (this.nowIntervalTraffic == null) ? null : this.nowIntervalTraffic.iterator();
  }

  public void addToNowIntervalTraffic(double elem) {
    if (this.nowIntervalTraffic == null) {
      this.nowIntervalTraffic = new java.util.ArrayList<java.lang.Double>();
    }
    this.nowIntervalTraffic.add(elem);
  }

  public java.util.List<java.lang.Double> getNowIntervalTraffic() {
    return this.nowIntervalTraffic;
  }

  public NowIntervalTrafficData setNowIntervalTraffic(java.util.List<java.lang.Double> nowIntervalTraffic) {
    this.nowIntervalTraffic = nowIntervalTraffic;
    return this;
  }

  public void unsetNowIntervalTraffic() {
    this.nowIntervalTraffic = null;
  }

  /** Returns true if field nowIntervalTraffic is set (has been assigned a value) and false otherwise */
  public boolean isSetNowIntervalTraffic() {
    return this.nowIntervalTraffic != null;
  }

  public void setNowIntervalTrafficIsSet(boolean value) {
    if (!value) {
      this.nowIntervalTraffic = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((java.lang.String)value);
      }
      break;

    case TIME_OF_HOUR:
      if (value == null) {
        unsetTimeOfHour();
      } else {
        setTimeOfHour((java.lang.Double)value);
      }
      break;

    case NOW_INTERVAL_TRAFFIC:
      if (value == null) {
        unsetNowIntervalTraffic();
      } else {
        setNowIntervalTraffic((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AREA_ID:
      return getAreaId();

    case TIME_OF_HOUR:
      return getTimeOfHour();

    case NOW_INTERVAL_TRAFFIC:
      return getNowIntervalTraffic();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AREA_ID:
      return isSetAreaId();
    case TIME_OF_HOUR:
      return isSetTimeOfHour();
    case NOW_INTERVAL_TRAFFIC:
      return isSetNowIntervalTraffic();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NowIntervalTrafficData)
      return this.equals((NowIntervalTrafficData)that);
    return false;
  }

  public boolean equals(NowIntervalTrafficData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_areaId = true && this.isSetAreaId();
    boolean that_present_areaId = true && that.isSetAreaId();
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (!this.areaId.equals(that.areaId))
        return false;
    }

    boolean this_present_timeOfHour = true;
    boolean that_present_timeOfHour = true;
    if (this_present_timeOfHour || that_present_timeOfHour) {
      if (!(this_present_timeOfHour && that_present_timeOfHour))
        return false;
      if (this.timeOfHour != that.timeOfHour)
        return false;
    }

    boolean this_present_nowIntervalTraffic = true && this.isSetNowIntervalTraffic();
    boolean that_present_nowIntervalTraffic = true && that.isSetNowIntervalTraffic();
    if (this_present_nowIntervalTraffic || that_present_nowIntervalTraffic) {
      if (!(this_present_nowIntervalTraffic && that_present_nowIntervalTraffic))
        return false;
      if (!this.nowIntervalTraffic.equals(that.nowIntervalTraffic))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAreaId()) ? 131071 : 524287);
    if (isSetAreaId())
      hashCode = hashCode * 8191 + areaId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeOfHour);

    hashCode = hashCode * 8191 + ((isSetNowIntervalTraffic()) ? 131071 : 524287);
    if (isSetNowIntervalTraffic())
      hashCode = hashCode * 8191 + nowIntervalTraffic.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NowIntervalTrafficData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeOfHour()).compareTo(other.isSetTimeOfHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeOfHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeOfHour, other.timeOfHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNowIntervalTraffic()).compareTo(other.isSetNowIntervalTraffic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowIntervalTraffic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowIntervalTraffic, other.nowIntervalTraffic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TrafficDescription.NowIntervalTrafficData(");
    boolean first = true;

    sb.append("areaId:");
    if (this.areaId == null) {
      sb.append("null");
    } else {
      sb.append(this.areaId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeOfHour:");
    sb.append(this.timeOfHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowIntervalTraffic:");
    if (this.nowIntervalTraffic == null) {
      sb.append("null");
    } else {
      sb.append(this.nowIntervalTraffic);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NowIntervalTrafficDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NowIntervalTrafficDataStandardScheme getScheme() {
      return new NowIntervalTrafficDataStandardScheme();
    }
  }

  private static class NowIntervalTrafficDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<NowIntervalTrafficData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NowIntervalTrafficData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaId = iprot.readString();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_OF_HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timeOfHour = iprot.readDouble();
              struct.setTimeOfHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOW_INTERVAL_TRAFFIC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.nowIntervalTraffic = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.nowIntervalTraffic.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNowIntervalTrafficIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NowIntervalTrafficData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.areaId != null) {
        oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
        oprot.writeString(struct.areaId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_OF_HOUR_FIELD_DESC);
      oprot.writeDouble(struct.timeOfHour);
      oprot.writeFieldEnd();
      if (struct.nowIntervalTraffic != null) {
        oprot.writeFieldBegin(NOW_INTERVAL_TRAFFIC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.nowIntervalTraffic.size()));
          for (double _iter3 : struct.nowIntervalTraffic)
          {
            oprot.writeDouble(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NowIntervalTrafficDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NowIntervalTrafficDataTupleScheme getScheme() {
      return new NowIntervalTrafficDataTupleScheme();
    }
  }

  private static class NowIntervalTrafficDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<NowIntervalTrafficData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NowIntervalTrafficData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAreaId()) {
        optionals.set(0);
      }
      if (struct.isSetTimeOfHour()) {
        optionals.set(1);
      }
      if (struct.isSetNowIntervalTraffic()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAreaId()) {
        oprot.writeString(struct.areaId);
      }
      if (struct.isSetTimeOfHour()) {
        oprot.writeDouble(struct.timeOfHour);
      }
      if (struct.isSetNowIntervalTraffic()) {
        {
          oprot.writeI32(struct.nowIntervalTraffic.size());
          for (double _iter4 : struct.nowIntervalTraffic)
          {
            oprot.writeDouble(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NowIntervalTrafficData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.areaId = iprot.readString();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeOfHour = iprot.readDouble();
        struct.setTimeOfHourIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.nowIntervalTraffic = new java.util.ArrayList<java.lang.Double>(_list5.size);
          double _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readDouble();
            struct.nowIntervalTraffic.add(_elem6);
          }
        }
        struct.setNowIntervalTrafficIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

